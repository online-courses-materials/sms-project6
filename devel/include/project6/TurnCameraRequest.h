// Generated by gencpp from file project6/TurnCameraRequest.msg
// DO NOT EDIT!


#ifndef PROJECT6_MESSAGE_TURNCAMERAREQUEST_H
#define PROJECT6_MESSAGE_TURNCAMERAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project6
{
template <class ContainerAllocator>
struct TurnCameraRequest_
{
  typedef TurnCameraRequest_<ContainerAllocator> Type;

  TurnCameraRequest_()
    : deg_turn(0.0)  {
    }
  TurnCameraRequest_(const ContainerAllocator& _alloc)
    : deg_turn(0.0)  {
  (void)_alloc;
    }



   typedef float _deg_turn_type;
  _deg_turn_type deg_turn;





  typedef boost::shared_ptr< ::project6::TurnCameraRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project6::TurnCameraRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TurnCameraRequest_

typedef ::project6::TurnCameraRequest_<std::allocator<void> > TurnCameraRequest;

typedef boost::shared_ptr< ::project6::TurnCameraRequest > TurnCameraRequestPtr;
typedef boost::shared_ptr< ::project6::TurnCameraRequest const> TurnCameraRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project6::TurnCameraRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project6::TurnCameraRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project6::TurnCameraRequest_<ContainerAllocator1> & lhs, const ::project6::TurnCameraRequest_<ContainerAllocator2> & rhs)
{
  return lhs.deg_turn == rhs.deg_turn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project6::TurnCameraRequest_<ContainerAllocator1> & lhs, const ::project6::TurnCameraRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project6

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::project6::TurnCameraRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project6::TurnCameraRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project6::TurnCameraRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project6::TurnCameraRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project6::TurnCameraRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project6::TurnCameraRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project6::TurnCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5d0bdb423d77c0cc03b401f73d9a3bb";
  }

  static const char* value(const ::project6::TurnCameraRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5d0bdb423d77c0cULL;
  static const uint64_t static_value2 = 0xc03b401f73d9a3bbULL;
};

template<class ContainerAllocator>
struct DataType< ::project6::TurnCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project6/TurnCameraRequest";
  }

  static const char* value(const ::project6::TurnCameraRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project6::TurnCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 deg_turn\n"
;
  }

  static const char* value(const ::project6::TurnCameraRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project6::TurnCameraRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deg_turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurnCameraRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project6::TurnCameraRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project6::TurnCameraRequest_<ContainerAllocator>& v)
  {
    s << indent << "deg_turn: ";
    Printer<float>::stream(s, indent + "  ", v.deg_turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT6_MESSAGE_TURNCAMERAREQUEST_H
